#!/bin/bash
set -e

# Define some options
CONTROL_FILE=/var/run/fwControl
modules=""
extraModules=""
policy_default='policy-drop'
STATS=0
ACCEPT=0
PRINT=0
LIST=0
LIST_MODULES=0
MODULES=0
EXTRA_MODULES=0
EXTRA_MODULES_LOAD=0
FORCE_RULES=0

if [ $? -ne 0  ]
then
   echo 'Some error happened ...'
   exit 1
fi

### Help function to help =]
HELP(){
    echo "Usage: ${0} [OPTION]..."
    printf "  -m module_name %6s Name of module that will be used to configure iptables\n"
    printf "  -z %18s Clean all iptables statistics\n"
    printf "  -A %18s Flush all rules and set ACCEPT as default action to all tables\n"
    printf "  -c module_file %6s File with modules name to be load. The format is one module per line. The default is \${CONFIG_DIRECTORY}/modules.fw\n"
    printf "  -C config_directory %1s Modules files directory. Default is /etc/fwControl\n"
    printf "  -a module_name %6s Add module in top of chain\n"
    printf "  -l %18s List all modules can be used\n"
    printf "  -L %18s List modules loaded\n"
    printf "  -p module_name %6s Print the rules of modules. The parameter all will print the content of all modules\n"
    printf "  -F %18s force the rules be read\n"
    printf "  -d %18s Policy default to be load - [policy-drop | output-accept]. Default: policy-drop\n"
    printf "  -h %18s Show this help\n"
}

OPTS=$(getopt -o 'm:c:C:p:a:d:zcAlLhF' -l 'help' -n 'fwControl' -- "$@")
eval set -- "${OPTS}"
unset OPTS

### Do the options parse
while true
do
    case $1 in
        '-m')
            MODULES=1
            modules="${modules}${2}\n"
            shift 2    
            continue
        ;;
        '-c')
            loadModulesFile="$2"
            shift 2    
            continue
        ;;
        '-C')
            configDir="$2"
            shift 2    
            continue
        ;;
        '-z')
            STATS=1
            shift
            continue
        ;;
        '-A')
            ACCEPT=1
            shift
            continue
        ;;
        '-l')
            LIST=1
            shift
            break
        ;;
        '-L')
            LIST_MODULES=1
            shift
            break
        ;;
        '-F')
            FORCE_RULES=1
            shift
            break
        ;;
        '-a')
            EXTRA_MODULES=1
            extraModules="${extraModules}${2}\n"
            shift 2
            continue
        ;;
        '-p')
            PRINT=1
            modules=$2
            shift 2
            break
        ;;
        '-d')
            policy_default=$2
            shift 2
            break
        ;;
        '-h|--help')
            echo 'Show the help'
            HELP
            shift
            exit 0
        ;;
        '--')
            shift
            break
        ;;
        *)
            echo "Wrong option: $1. Please use some below options:"
            HELP
            exit 2    
        ;;
    esac
done    

if [ "$(id -u)" != 0 ]
then
	echo "Execute this script as root or use sudo"
	exit 5
fi

### Do the right variable
if [ -z "${configDir}"  ]
then
  configDir="/etc/fwControl"
fi

if [ -z "${loadModulesFile}" ]
then
  loadModulesFile="${configDir}/modules.fw"
fi

### Checking the options and permissions
if [ -d ${configDir} -a -r ${configDir} ]
then
  CONFIGDIR=1
else
  CONFIGDIR=0
fi

if [ -r ${loadModulesFile} -a -s ${loadModulesFile} -a -f ${loadModulesFile} ]
then
  LOAD_MODULES_FILE=1
else
  LOAD_MODULES_FILE=0
fi

if [ $(echo ${modules} | wc -c) -gt 1 ]
then
  MODULE=1
else
  MODULE=0
fi

if [ "${CONFIGDIR}" = 0 ]
then
  echo -e "Problems to read the configuration directory (${configDir}). Please configure with option '-C' and verify the permission"
  exit 2
fi

if [ "${MODULES}" = 1 ] && [ "${EXTRA_MODULES}" = 1 ]
then
  echo "The option -m can not be use together with -b"
  exit 4
fi

if [ "${LIST}" = 1 ]
then
    ls ${configDir}/modules
    exit 0
fi

if [ ${LIST_MODULES} = 1 ]
then
  cat ${CONTROL_FILE}
  exit 0
fi

if [ "${LOAD_MODULES_FILE}" = 0 ] && [ "${ACCEPT}" = 0 ]
then
    echo -e "Don't exist modules to be load or the file can not be read. The default rules will be load.\nPlease configure with option '-c' or '-m' and verify the permissions if it is not right"
fi

### Add modules to control file if not exist
addModulesToControlFile() {
  grep -q "${1}" "${CONTROL_FILE}" || echo "${1}" >> "${CONTROL_FILE}"
}

### Function to verify the modules
verifyModule() {
  MODULE_PATH="${configDir}/modules"
  if [ ! -f "${MODULE_PATH}/${1}" -a ! -r "${MODULE_PATH}/${1}" ]
  then
    echo "Don't exist module "${1}" in directory "${configDir}"/modules. Please verify the directory and permissios"
    exit 3
  fi
}

### Function to load modules
loadModules() {
  verifyModule "${1}"

  if [ ${EXTRA_MODULES_LOAD} = 1 ]
  then
    source <(cat "${configDir}"/modules/"${1}" |sed -e s/"-A "/"-I "/g ) && INSERT_MODULE_RUN_CONFIG=1
  else
    source "${configDir}"/modules/"${1}" && INSERT_MODULE_RUN_CONFIG=1
  fi
}

loadModulesFromFile() {
  while read a
  do
    loadModules "${a}"
    addModulesToControlFile "${a}"
  done < ${loadModulesFile}

  if [ ${EXTRA_MODULES} = 1 ]
  then
    while read a
    do
      loadModules "${a}"
    done < ${CONTROL_FILE}
  fi

}

preRules() {
  ### The order is important
  ### Clean All Rules  
  loadModules flush

  ### Import loppback
  loadModules loopback

  ### Default policy Drop
  loadModules ${policy_default}

  ### Module web
  loadModules web

}

postRules() {
  ### Import Safety rules here
  ### Because they can be invalidated by the rules above
  loadModules safety

  ### load the logs
  loadModules drop-log

  ### Drop all
  loadModules drop-all

  echo -e "Firewall rules load with success!"
  exit 0
}


## Print Modules
if [ "${PRINT}" = 1 ] && [ ${MODULE} != 0 ]
then
    if [ "${modules}" = "all" ]
    then
        for i in $(ls -1 "${configDir}"/modules)
        do 
            printf "############### Module: %s %10s\n" "${i}"
            cat "${configDir}"/modules/"${i}"
            echo -e "\n"
        done
        exit 0
    else
        verifyModule "${i}"
        cat "${configDir}"/modules/"${modules}"
        exit 0
    fi
fi

### Verify if the option accept was activate
if [ "${ACCEPT}" = 1 ]
then
  loadModules flush
  loadModules policy-accept
  > ${CONTROL_FILE}
  echo -e "Firewall rules load with success!"
  exit 0
fi

### Clean the stats
if [ "${STATS}" = 1 ]
then
  loadModules clean-stats
  echo -e "Firewall stats clean with success!"
  exit 0
fi

if [ ${FORCE_RULES} = 1 ]
then
  preRules
  EXTRA_MODULES=1
  loadModulesFromFile
  postRules
fi

### Load extra modules without change the present modules
if [ ${EXTRA_MODULES} = 1 ]
then
  preRules
  loadModulesFromFile
  EXTRA_MODULES_LOAD=1
  for i in $(echo -e "${extraModules}")
  do
    loadModules "${i}"
    addModulesToControlFile "${i}"
  done
  # Deactivate to load rules on right order
  EXTRA_MODULES_LOAD=0
  postRules
fi

### Do action with default option - No one module or load with -m
preRules
truncate -s0 "${CONTROL_FILE}"
loadModulesFromFile
for i in $(echo -e "${modules}")
do
  loadModules "${i}"
  addModulesToControlFile "${i}"
done
postRules
